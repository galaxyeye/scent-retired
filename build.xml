<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<project name="qiwur-scent-0.9.0" default="local" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<!-- Load all the default properties, and any the user wants -->
	<!-- to contribute (without having to type -D or edit this file -->
	<property file="${user.home}/build.properties" />
	<property file="${basedir}/build.properties" />
	<property file="${basedir}/default.properties" />
	<property name="test.junit.output.format" value="plain" />
	<property name="release.dir" value="${build.dir}/release" />

	<!-- define Maven coordinates, repository url and artifacts name etc -->
	<property name="groupId" value="org.qiwur.scent" />
	<property name="artifactId" value="scent" />
	<property name="maven-repository-url" value="https://repository.apache.org/service/local/staging/deploy/maven2" />
	<property name="maven-repository-id" value="apache.releases.https" />
	<property name="maven-jar" value="${release.dir}/${artifactId}-${version}.jar" />
	<property name="maven-javadoc-jar" value="${release.dir}/${artifactId}-${version}-javadoc.jar" />
	<property name="maven-sources-jar" value="${release.dir}/${artifactId}-${version}-sources.jar" />

	<!-- the normal classpath -->
	<path id="classpath">
		<pathelement location="${build.classes}" />
		<fileset dir="${build.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<presetdef name="javac">
		<javac includeantruntime="false" />
	</presetdef>

	<!-- the unit test classpath -->
	<dirname property="plugins.classpath.dir" file="${build.plugins}" />
	<path id="test.classpath">
		<pathelement location="${test.build.classes}" />
		<pathelement location="${conf.dir}" />
		<pathelement location="${test.src.dir}" />
		<pathelement location="${plugins.classpath.dir}" />
		<path refid="classpath" />
		<pathelement location="${build.dir}/${final.name}.job" />
		<fileset dir="${build.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- ====================================================== -->
	<!-- Stuff needed by all targets -->
	<!-- ====================================================== -->
	<target name="init" depends="ivy-init" description="--> stuff required by all targets">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes}" />
		<mkdir dir="${release.dir}" />
    <mkdir dir="${build.classes}/domain" />

		<mkdir dir="${test.build.dir}" />
		<mkdir dir="${test.build.classes}" />

		<touch datetime="01/25/1971 2:00 pm">
			<fileset dir="${conf.dir}" includes="**/*.template" />
		</touch>

		<copy todir="${conf.dir}" verbose="true">
			<fileset dir="${conf.dir}" includes="**/*.template" />
			<mapper type="glob" from="*.template" to="*" />
		</copy>
	</target>

	<!-- ====================================================== -->
	<!-- Compile the Java files -->
	<!-- ====================================================== -->
	<target name="compile" depends="compile-core, compile-plugins" description="--> compile all Java files" />

	<target name="compile-core" depends="init, resolve-default" description="--> compile core Java files only">
		<javac encoding="${build.encoding}" srcdir="${src.dir}" 
			includes="org/qiwur/scent/**/*.java" 
			destdir="${build.classes}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" 
			source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg value="-Xlint:-path" />
			<classpath refid="classpath" />
		</javac>
		<copy todir="${build.classes}">
			<fileset dir="${src.dir}" includes="org/qiwur/scent/**/*.properties" />
		</copy>
	</target>

	<target name="compile-plugins" depends="init, resolve-default" description="--> compile plugins only">
		<ant dir="src/plugin" target="deploy" inheritAll="false" />
	</target>

	<!-- ================================================================== -->
	<!-- Make scent.jar -->
	<!-- ================================================================== -->
	<!-- -->
	<!-- ================================================================== -->
	<target name="jar" depends="compile-core" description="--> make scent.jar">
		<copy file="${conf.dir}/scent-default.xml" todir="${build.classes}" />
		<copy file="${conf.dir}/scent-site.xml" todir="${build.classes}" />

    <copy todir="${build.classes}/domain">
       <fileset dir="${conf.dir}/domain" />
    </copy>

		<jar jarfile="${build.dir}/${final.name}.jar" basedir="${build.classes}">
			<manifest>
			</manifest>
		</jar>
	</target>

	<!-- ================================================================== -->
	<!-- Make job jar -->
	<!-- ================================================================== -->
	<!-- -->
	<!-- ================================================================== -->
	<target name="job" depends="compile" description="--> make scent.job jar">
		<jar jarfile="${build.dir}/${final.name}.job">
			<!-- 
         If the build.classes has the scent config files because the jar command 
         command has run, exclude them. The conf directory has them. 
      -->
			<zipfileset dir="${build.classes}" excludes="scent-default.xml,scent-site.xml" />
			<zipfileset dir="${conf.dir}" excludes="*.template,hadoop*.*" />
			<!-- 
         need to exclude hsqldb.jar due to a conflicting version already present 
         in Hadoop/lib. 
      -->
			<zipfileset dir="${build.lib.dir}" prefix="lib" includes="**/*.jar" 
				excludes="jasper*.jar,jsp-*.jar,hadoop-*.jar,hbase*test*.jar,ant*jar,hsqldb*.jar" />
			<zipfileset dir="${build.plugins}" prefix="classes/plugins" />
		</jar>
	</target>

	<target name="local" depends="compile, jar, compile-core-test" description="--> default target for running Nutch">
		<mkdir dir="${runtime.dir}" />
		<mkdir dir="${runtime.local}" />
		<!-- local area -->
		<copy file="${build.dir}/${final.name}.jar" todir="${runtime.local}/lib" />
		<copy todir="${runtime.local}/conf">
			<fileset dir="${conf.dir}" excludes="*.template" />
		</copy>
		<copy todir="${runtime.local}/output">
			<fileset dir="${output.dir}" />
		</copy>
		<copy todir="${runtime.local}/wwwroot">
			<fileset dir="${wwwroot.dir}" />
		</copy>
		<copy todir="${runtime.local}/models">
			<fileset dir="${models.dir}" />
		</copy>
		<copy todir="${runtime.local}/bin">
			<fileset dir="src/bin" />
		</copy>
		<chmod perm="ugo+x" type="file">
			<fileset dir="${runtime.local}/bin" />
		</chmod>
		<copy todir="${runtime.local}/lib">
			<fileset dir="${build.dir}/lib" excludes="ant*.jar,jasper*.jar,jsp-*.jar,hadoop*test*.jar,hbase*test*.jar" />
		</copy>
		<copy todir="${runtime.local}/plugins">
			<fileset dir="${build.dir}/plugins" />
		</copy>
		<copy todir="${runtime.local}/test">
			<fileset dir="${build.dir}/test" />
		</copy>
	</target>

	<target name="runtime" depends="jar, job" description="--> default target for running Nutch">
		<mkdir dir="${runtime.dir}" />
		<mkdir dir="${runtime.local}" />
		<mkdir dir="${runtime.deploy}" />
		<!-- deploy area -->
		<copy file="${build.dir}/${final.name}.job" todir="${runtime.deploy}" />
		<copy todir="${runtime.deploy}/bin">
			<fileset dir="src/bin" />
		</copy>
		<chmod perm="ugo+x" type="file">
			<fileset dir="${runtime.deploy}/bin" />
		</chmod>
		<!-- local area -->
		<copy file="${build.dir}/${final.name}.jar" todir="${runtime.local}/lib" />
		<copy todir="${runtime.local}/conf">
			<fileset dir="${conf.dir}" excludes="*.template" />
		</copy>
		<copy todir="${runtime.local}/output">
			<fileset dir="${output.dir}" />
		</copy>
		<copy todir="${runtime.local}/wwwroot">
			<fileset dir="${wwwroot.dir}" />
		</copy>
		<copy todir="${runtime.local}/models">
			<fileset dir="${models.dir}" />
		</copy>
		<copy todir="${runtime.local}/bin">
			<fileset dir="src/bin" />
		</copy>
		<chmod perm="ugo+x" type="file">
			<fileset dir="${runtime.local}/bin" />
		</chmod>
		<copy todir="${runtime.local}/lib">
			<fileset dir="${build.dir}/lib" excludes="ant*.jar,jasper*.jar,jsp-*.jar,hadoop*test*.jar,hbase*test*.jar" />
		</copy>
		<copy todir="${runtime.local}/plugins">
			<fileset dir="${build.dir}/plugins" />
		</copy>
		<copy todir="${runtime.local}/test">
			<fileset dir="${build.dir}/test" />
		</copy>
	</target>

	<!-- ================================================================== -->
	<!-- Compile test code -->
	<!-- ================================================================== -->
	<target name="compile-core-test" depends="compile-core, resolve-test" description="--> compile test code">
		<javac encoding="${build.encoding}" srcdir="${test.src.dir}" includes="org/qiwur/scent*/**/*.java" destdir="${test.build.classes}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg value="-Xlint:-path" />
			<classpath refid="test.classpath" />
		</javac>
	</target>

	<!-- ================================================================== -->
	<!-- Run unit tests -->
	<!-- ================================================================== -->
	<target name="test" depends="test-core, test-plugins" description="--> run JUnit tests" />

	<target name="test-core" depends="job, compile-core-test" description="--> run core JUnit tests only">
		<delete dir="${test.build.data}" />
		<mkdir dir="${test.build.data}" />
		<!-- 
      copy resources needed in junit tests 
      -->
		<copy todir="${test.build.data}">
			<fileset dir="src/testresources" includes="**/*" />
		</copy>
		<copy file="${test.src.dir}/scent-site.xml" todir="${test.build.classes}" />
		<copy file="${test.src.dir}/log4j2.xml" todir="${test.build.classes}" />
		<copy file="${test.src.dir}/gora.properties" todir="${test.build.classes}" />

		<junit printsummary="yes" haltonfailure="no" fork="yes" dir="${basedir}" errorProperty="tests.failed" 
			failureProperty="tests.failed" maxmemory="1000m">
			<sysproperty key="test.build.data" value="${test.build.data}" />
			<sysproperty key="test.src.dir" value="${test.src.dir}" />
			<sysproperty key="javax.xml.parsers.DocumentBuilderFactory" value="com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl" />
			<classpath refid="test.classpath" />
			<formatter type="${test.junit.output.format}" />
			<batchtest todir="${test.build.dir}" unless="testcase">
				<fileset dir="${test.src.dir}" includes="**/Test*.java" excludes="**/${test.exclude}.java" />
			</batchtest>
			<batchtest todir="${test.build.dir}" if="testcase">
				<fileset dir="${test.src.dir}" includes="**/${testcase}.java" />
			</batchtest>
		</junit>

		<fail if="tests.failed">Tests failed!</fail>
	</target>

	<target name="test-plugins" depends="compile" description="--> run plugin JUnit tests only">
		<ant dir="src/plugin" target="test" inheritAll="false" />
	</target>

	<target name="nightly" depends="test, tar-src, zip-src, javadoc" description="--> run the nightly target build">
	</target>

	<!-- ================================================================== -->
	<!-- Ivy targets -->
	<!-- ================================================================== -->

	<!-- target: resolve ================================================= -->
	<target name="resolve-default" depends="clean-lib, init" description="--> resolve and retrieve dependencies with ivy">
		<ivy:resolve file="${ivy.file}" conf="default" log="download-only" />
		<ivy:retrieve pattern="${build.lib.dir}/[artifact]-[revision].[ext]" symlink="false" log="quiet" />
		<antcall target="copy-libs" />
	</target>

	<target name="resolve-test" depends="clean-lib, init" description="--> resolve and retrieve dependencies with ivy">
		<ivy:resolve file="${ivy.file}" conf="test" log="download-only" />
		<ivy:retrieve pattern="${build.lib.dir}/[artifact]-[revision].[ext]" symlink="false" log="quiet" />
		<antcall target="copy-libs" />
	</target>

	<target name="copy-libs" description="--> copy the libs in lib, which are not ivy enabled">
		<!-- copy the libs in lib, which are not ivy enabled -->
		<copy todir="${build.lib.dir}/" failonerror="false">
			<fileset dir="${lib.dir}" includes="**/*.jar" />
		</copy>
	</target>

	<!-- target: publish-local =========================================== -->
	<target name="publish-local" depends="jar" description="--> publish this project in the local ivy repository">
		<ivy:publish artifactspattern="${build.dir}/[artifact]-${version}.[ext]" resolver="local" pubrevision="${version}" pubdate="${now}" status="integration" forcedeliver="true" overwrite="true" />
		<echo message="project ${ant.project.name} published locally with version ${version}" />
	</target>

	<!-- target: report ================================================== -->
	<target name="report" depends="resolve-test" description="--> generates a report of dependencies">
		<ivy:report todir="${build.dir}" />
	</target>

	<!-- target: ivy-init ================================================ -->
	<target name="ivy-init" depends="ivy-probe-antlib, ivy-init-antlib" description="--> initialise Ivy settings">
		<ivy:settings file="${ivy.dir}/ivysettings.xml" />
	</target>

	<!-- target: ivy-probe-antlib ======================================== -->
	<target name="ivy-probe-antlib" description="--> probe the antlib library">
		<condition property="ivy.found">
			<typefound uri="antlib:org.apache.ivy.ant" name="cleancache" />
		</condition>
	</target>

	<!-- target: ivy-download ============================================ -->
	<target name="ivy-download" description="--> download ivy">
		<available file="${ivy.jar}" property="ivy.jar.found" />
		<antcall target="ivy-download-unchecked" />
	</target>

	<!-- target: ivy-download-unchecked ================================== -->
	<target name="ivy-download-unchecked" unless="ivy.jar.found" description="--> fetch any ivy file">
		<get src="${ivy.repo.url}" dest="${ivy.jar}" usetimestamp="true" />
	</target>

	<!-- target: ivy-init-antlib ========================================= -->
	<target name="ivy-init-antlib" depends="ivy-download" unless="ivy.found" description="--> attempt to use Ivy with Antlib">
		<typedef uri="antlib:org.apache.ivy.ant" onerror="fail" loaderRef="ivyLoader">
			<classpath>
				<pathelement location="${ivy.jar}" />
			</classpath>
		</typedef>
		<fail>
			<condition>
				<not>
					<typefound uri="antlib:org.apache.ivy.ant" name="cleancache" />
				</not>
			</condition>
     You need Apache Ivy 2.0 or later from http://ant.apache.org/
     It could not be loaded from ${ivy.repo.url}
    </fail>
	</target>

	<!-- ================================================================== -->
	<!-- Documentation -->
	<!-- ================================================================== -->
	<target name="javadoc" depends="compile" description="--> generate Javadoc">
		<mkdir dir="${build.javadoc}" />
		<javadoc overview="${src.dir}/overview.html" destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="${name} ${version} API" doctitle="${name} ${version} API" bottom="Copyright &amp;copy; ${year} The Apache Software Foundation">
			<arg value="${javadoc.proxy.host}" />
			<arg value="${javadoc.proxy.port}" />

			<packageset dir="${src.dir}" />

			<link href="${javadoc.link.java}" />
			<link href="${javadoc.link.lucene}" />
			<link href="${javadoc.link.hadoop}" />

			<classpath refid="classpath" />
			<classpath>
				<fileset dir="${plugins.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

			<group title="Core" packages="org.qiwur.scent.*" />
			<!--
			<group title="Plugins API" packages="${plugins.api}" />
			<group title="Protocol Plugins" packages="${plugins.protocol}" />
			<group title="URL Filter Plugins" packages="${plugins.urlfilter}" />
			<group title="Scoring Plugins" packages="${plugins.scoring}" />
			<group title="Parse Plugins" packages="${plugins.parse}" />
			<group title="Indexing Filter Plugins" packages="${plugins.index}" />
			<group title="Misc. Plugins" packages="${plugins.misc}" />
			-->
		</javadoc>
		<!-- Copy the plugin.dtd file to the plugin doc-files dir -->
		<copy file="${plugins.dir}/plugin.dtd" todir="${build.javadoc}/org/qiwur/scent/plugin/doc-files" />
	</target>

	<target name="default-doc" description="--> generate default Nutch documentation">
		<style basedir="${conf.dir}" destdir="${docs.dir}" includes="scent-default.xml" style="conf/scent-conf.xsl" />
	</target>

	<!-- ================================================================== -->
	<!-- D I S T R I B U T I O N                                            -->
	<!-- ================================================================== -->
	<!--                                                                    -->
	<!-- ================================================================== -->
	<target name="package-src" depends="runtime, javadoc" description="--> generate source distribution package">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${src.dist.version.dir}" />
		<mkdir dir="${src.dist.version.dir}/lib" />
		<mkdir dir="${src.dist.version.dir}/docs" />
		<mkdir dir="${src.dist.version.dir}/docs/api" />
		<mkdir dir="${src.dist.version.dir}/ivy" />

		<copy todir="${src.dist.version.dir}/lib" includeEmptyDirs="false">
			<fileset dir="lib" />
		</copy>

		<copy todir="${src.dist.version.dir}/conf">
			<fileset dir="${conf.dir}" excludes="**/*.template" />
		</copy>

		<copy todir="${src.dist.version.dir}/docs/api">
			<fileset dir="${build.javadoc}" />
		</copy>

		<copy todir="${src.dist.version.dir}">
			<fileset dir=".">
				<include name="*.txt" />
				<!--<include name="KEYS" />-->
			</fileset>
		</copy>

		<copy todir="${src.dist.version.dir}/src" includeEmptyDirs="true">
			<fileset dir="src" />
		</copy>

		<copy todir="${src.dist.version.dir}/ivy" includeEmptyDirs="true">
			<fileset dir="ivy" />
		</copy>

		<copy todir="${src.dist.version.dir}/" file="build.xml" />
		<copy todir="${src.dist.version.dir}/" file="default.properties" />

	</target>

	<target name="package-bin" depends="runtime, javadoc" description="--> generate binary distribution package">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${bin.dist.version.dir}" />
		<mkdir dir="${bin.dist.version.dir}/lib" />
		<mkdir dir="${bin.dist.version.dir}/bin" />
		<mkdir dir="${bin.dist.version.dir}/conf" />
		<mkdir dir="${bin.dist.version.dir}/docs" />
		<mkdir dir="${bin.dist.version.dir}/docs/api" />
		<mkdir dir="${bin.dist.version.dir}/plugins" />

		<copy todir="${bin.dist.version.dir}/lib" includeEmptyDirs="false">
			<fileset dir="runtime/local/lib" />
		</copy>

		<copy todir="${bin.dist.version.dir}/bin">
			<fileset dir="runtime/local/bin" />
		</copy>

		<chmod perm="ugo+x" type="file">
			<fileset dir="${bin.dist.version.dir}/bin" />
		</chmod>

		<copy todir="${bin.dist.version.dir}/conf">
			<fileset dir="runtime/local/conf" excludes="**/*.template" />
		</copy>

		<copy todir="${bin.dist.version.dir}/docs/api">
			<fileset dir="${build.javadoc}" />
		</copy>

		<copy todir="${bin.dist.version.dir}">
			<fileset dir=".">
				<include name="*.txt" />
			</fileset>
		</copy>

		<copy todir="${bin.dist.version.dir}/plugins" includeEmptyDirs="true">
			<fileset dir="runtime/local/plugins" />
		</copy>

	</target>

	<!-- ================================================================== -->
	<!-- Make src-release tarball                                               -->
	<!-- ================================================================== -->
	<target name="tar-src" depends="package-src" description="--> generate src.tar.gz distribution package">
		<tar compression="gzip" longfile="gnu" destfile="${src.dist.version.dir}.tar.gz">
			<tarfileset dir="${src.dist.version.dir}" mode="664" prefix="${final.name}">
				<exclude name="src/bin/*" />
				<include name="**" />
			</tarfileset>
			<tarfileset dir="${src.dist.version.dir}" mode="755" prefix="${final.name}">
				<include name="src/bin/*" />
			</tarfileset>
		</tar>
	</target>

	<!-- ================================================================== -->
	<!-- Make bin release tarball                                               -->
	<!-- ================================================================== -->
	<target name="tar-bin" depends="package-bin" description="--> generate bin.tar.gz distribution package">
		<tar compression="gzip" longfile="gnu" destfile="${bin.dist.version.dir}.tar.gz">
			<tarfileset dir="${bin.dist.version.dir}" mode="664" prefix="${final.name}">
				<exclude name="bin/*" />
				<include name="**" />
			</tarfileset>
			<tarfileset dir="${bin.dist.version.dir}" mode="755" prefix="${final.name}">
				<include name="bin/*" />
			</tarfileset>
		</tar>
	</target>

	<!-- ================================================================== -->
	<!-- Make src release zip                                               -->
	<!-- ================================================================== -->
	<target name="zip-src" depends="package-src" description="--> generate src.zip distribution package">
		<zip compress="true" casesensitive="yes" destfile="${src.dist.version.dir}.zip">
			<zipfileset dir="${src.dist.version.dir}" filemode="664" prefix="${final.name}">
				<exclude name="src/bin/*" />
				<include name="**" />
			</zipfileset>
			<zipfileset dir="${src.dist.version.dir}" filemode="755" prefix="${final.name}">
				<include name="src/bin/*" />
			</zipfileset>
		</zip>
	</target>

	<!-- ================================================================== -->
	<!-- Make bin release zip                                               -->
	<!-- ================================================================== -->
	<target name="zip-bin" depends="package-bin" description="--> generate bin.zip distribution package">
		<zip compress="true" casesensitive="yes" destfile="${bin.dist.version.dir}.zip">
			<zipfileset dir="${bin.dist.version.dir}" filemode="664" prefix="${final.name}">
				<exclude name="bin/*" />
				<include name="**" />
			</zipfileset>
			<zipfileset dir="${bin.dist.version.dir}" filemode="755" prefix="${final.name}">
				<include name="bin/*" />
			</zipfileset>
		</zip>
	</target>

	<!-- ================================================================== -->
	<!-- Clean. Delete the build files, and their directories -->
	<!-- ================================================================== -->

	<!-- target: clean =================================================== -->
	<target name="clean" depends="clean-build, clean-lib, clean-dist, clean-runtime" description="--> clean the project" />

	<!-- target: clean-local ============================================= -->
	<target name="clean-local" depends="" description="--> cleans the local repository for the current module">
		<delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}" />
	</target>

	<!-- target: clean-lib =============================================== -->
	<target name="clean-lib" description="--> clean the project libraries directory (dependencies)">
		<delete includeemptydirs="true" dir="${build.lib.dir}" />
	</target>

	<!-- target: clean-build ============================================= -->
	<target name="clean-build" description="--> clean the project built files">
		<delete includeemptydirs="true" dir="${build.dir}" />
	</target>

	<!-- target: clean-dist ============================================= -->
	<target name="clean-dist" description="--> clean the project dist files">
		<delete includeemptydirs="true" dir="${dist.dir}" />
	</target>

	<!-- target: clean-cache ============================================= -->
	<target name="clean-cache" depends="" description="--> delete ivy cache">
		<ivy:cleancache />
	</target>

	<target name="clean-runtime" description="--> clean the project runtime area">
		<delete includeemptydirs="true" dir="${runtime.dir}" />
	</target>

	<!-- ================================================================== -->
	<!-- RAT targets -->
	<!-- ================================================================== -->
	<target name="rat-sources-typedef" description="--> run RAT antlib task">
		<typedef resource="org/apache/rat/anttasks/antlib.xml">
			<classpath>
				<fileset dir="." includes="rat*.jar" />
			</classpath>
		</typedef>
	</target>

	<target name="rat-sources" depends="rat-sources-typedef" description="--> runs the tasks over src/java">
		<rat:report xmlns:rat="antlib:org.apache.rat.anttasks">
			<fileset dir="src">
				<include name="java/**/*" />
				<include name="plugin/**/src/**/*" />
			</fileset>
		</rat:report>
	</target>

	<!-- ================================================================== -->
	<!-- Eclipse targets                                                    -->
	<!-- ================================================================== -->

	<!-- classpath for generating eclipse project -->
	<path id="eclipse.classpath">
		<fileset dir="${build.lib.dir}">
			<include name="*.jar" />
			<exclude name="ant-eclipse-1.0-jvm1.2.jar" />
		</fileset>
	</path>

	<!-- target: ant-eclipse-download   =================================== -->
	<target name="ant-eclipse-download" description="--> Downloads the ant-eclipse binary.">
		<get src="http://downloads.sourceforge.net/project/ant-eclipse/ant-eclipse/1.0/ant-eclipse-1.0.bin.tar.bz2" dest="${build.dir}/ant-eclipse-1.0.bin.tar.bz2" usetimestamp="false" />

		<untar src="${build.dir}/ant-eclipse-1.0.bin.tar.bz2" dest="${build.dir}" compression="bzip2">
			<patternset>
				<include name="lib/ant-eclipse-1.0-jvm1.2.jar" />
			</patternset>
		</untar>

		<delete file="${build.dir}/ant-eclipse-1.0.bin.tar.bz2" />
	</target>

	<!-- target: eclipse   ================================================ -->
	<target name="eclipse" depends="clean,init,job,ant-eclipse-download" description="--> Create eclipse project files">

		<pathconvert property="eclipse.project">
			<path path="${basedir}" />
			<regexpmapper from="^.*/([^/]+)$$" to="\1" handledirsep="yes" />
		</pathconvert>

		<taskdef name="eclipse" classname="prantl.ant.eclipse.EclipseTask" classpath="${build.dir}/lib/ant-eclipse-1.0-jvm1.2.jar" />

		<eclipse updatealways="true">
			<project name="${eclipse.project}" />
			<classpath>
				<library path="${conf.dir}" exported="false" />
				<library path="${basedir}/src/bin" exported="false" />
				<library pathref="eclipse.classpath" exported="false" />

				<source path="${basedir}/src/java/" />
				<source path="${basedir}/src/test/" />
				<source path="${basedir}/src/plugin/data-extractor/src/java/" />
				<source path="${basedir}/src/plugin/data-extractor/src/test/" />

				<output path="${basedir}/build/classes" />
			</classpath>
		</eclipse>
	</target>
</project>
