/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.qiwur.scent.storage;  
@SuppressWarnings("all")
public class PageBlock extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PageBlock\",\"namespace\":\"org.qiwur.scent.storage\",\"fields\":[{\"name\":\"__g__dirty\",\"type\":\"bytes\",\"doc\":\"Bytes used to represent weather or not a field is dirty.\",\"default\":\"AAA=\"},{\"name\":\"baseUrl\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"xpath\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"baseSequence\",\"type\":\"int\",\"default\":0},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":\"int\",\"default\":0},{\"name\":\"buildTime\",\"type\":\"long\",\"default\":0},{\"name\":\"content\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"contentMD5\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"labelScore\",\"type\":\"float\",\"default\":0},{\"name\":\"kvpairs\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"string\"]},\"default\":{}},{\"name\":\"markers\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"string\"]},\"default\":{}},{\"name\":\"batchId\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    __G__DIRTY(0, "__g__dirty"),
    BASE_URL(1, "baseUrl"),
    XPATH(2, "xpath"),
    BASE_SEQUENCE(3, "baseSequence"),
    NAME(4, "name"),
    STATUS(5, "status"),
    BUILD_TIME(6, "buildTime"),
    CONTENT(7, "content"),
    CONTENT_MD5(8, "contentMD5"),
    LABEL(9, "label"),
    LABEL_SCORE(10, "labelScore"),
    KVPAIRS(11, "kvpairs"),
    MARKERS(12, "markers"),
    BATCH_ID(13, "batchId"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "__g__dirty",
  "baseUrl",
  "xpath",
  "baseSequence",
  "name",
  "status",
  "buildTime",
  "content",
  "contentMD5",
  "label",
  "labelScore",
  "kvpairs",
  "markers",
  "batchId",
  };

  /** Bytes used to represent weather or not a field is dirty. */
  private java.nio.ByteBuffer __g__dirty = java.nio.ByteBuffer.wrap(new byte[2]);
  private java.lang.CharSequence baseUrl;
  private java.lang.CharSequence xpath;
  private int baseSequence;
  private java.lang.CharSequence name;
  private int status;
  private long buildTime;
  private java.nio.ByteBuffer content;
  private java.lang.CharSequence contentMD5;
  private java.lang.CharSequence label;
  private float labelScore;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> kvpairs;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> markers;
  private java.lang.CharSequence batchId;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return __g__dirty;
    case 1: return baseUrl;
    case 2: return xpath;
    case 3: return baseSequence;
    case 4: return name;
    case 5: return status;
    case 6: return buildTime;
    case 7: return content;
    case 8: return contentMD5;
    case 9: return label;
    case 10: return labelScore;
    case 11: return kvpairs;
    case 12: return markers;
    case 13: return batchId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: __g__dirty = (java.nio.ByteBuffer)(value); break;
    case 1: baseUrl = (java.lang.CharSequence)(value); break;
    case 2: xpath = (java.lang.CharSequence)(value); break;
    case 3: baseSequence = (java.lang.Integer)(value); break;
    case 4: name = (java.lang.CharSequence)(value); break;
    case 5: status = (java.lang.Integer)(value); break;
    case 6: buildTime = (java.lang.Long)(value); break;
    case 7: content = (java.nio.ByteBuffer)(value); break;
    case 8: contentMD5 = (java.lang.CharSequence)(value); break;
    case 9: label = (java.lang.CharSequence)(value); break;
    case 10: labelScore = (java.lang.Float)(value); break;
    case 11: kvpairs = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    case 12: markers = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    case 13: batchId = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'baseUrl' field.
   */
  public java.lang.CharSequence getBaseUrl() {
    return baseUrl;
  }

  /**
   * Sets the value of the 'baseUrl' field.
   * @param value the value to set.
   */
  public void setBaseUrl(java.lang.CharSequence value) {
    this.baseUrl = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'baseUrl' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBaseUrlDirty(java.lang.CharSequence value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'xpath' field.
   */
  public java.lang.CharSequence getXpath() {
    return xpath;
  }

  /**
   * Sets the value of the 'xpath' field.
   * @param value the value to set.
   */
  public void setXpath(java.lang.CharSequence value) {
    this.xpath = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'xpath' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isXpathDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'baseSequence' field.
   */
  public java.lang.Integer getBaseSequence() {
    return baseSequence;
  }

  /**
   * Sets the value of the 'baseSequence' field.
   * @param value the value to set.
   */
  public void setBaseSequence(java.lang.Integer value) {
    this.baseSequence = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'baseSequence' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBaseSequenceDirty(java.lang.Integer value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'name' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isNameDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'status' field.
   */
  public java.lang.Integer getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.Integer value) {
    this.status = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'status' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStatusDirty(java.lang.Integer value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'buildTime' field.
   */
  public java.lang.Long getBuildTime() {
    return buildTime;
  }

  /**
   * Sets the value of the 'buildTime' field.
   * @param value the value to set.
   */
  public void setBuildTime(java.lang.Long value) {
    this.buildTime = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'buildTime' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBuildTimeDirty(java.lang.Long value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'content' field.
   */
  public java.nio.ByteBuffer getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.nio.ByteBuffer value) {
    this.content = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'content' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isContentDirty(java.nio.ByteBuffer value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'contentMD5' field.
   */
  public java.lang.CharSequence getContentMD5() {
    return contentMD5;
  }

  /**
   * Sets the value of the 'contentMD5' field.
   * @param value the value to set.
   */
  public void setContentMD5(java.lang.CharSequence value) {
    this.contentMD5 = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'contentMD5' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isContentMD5Dirty(java.lang.CharSequence value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'label' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLabelDirty(java.lang.CharSequence value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'labelScore' field.
   */
  public java.lang.Float getLabelScore() {
    return labelScore;
  }

  /**
   * Sets the value of the 'labelScore' field.
   * @param value the value to set.
   */
  public void setLabelScore(java.lang.Float value) {
    this.labelScore = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'labelScore' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLabelScoreDirty(java.lang.Float value) {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'kvpairs' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getKvpairs() {
    return kvpairs;
  }

  /**
   * Sets the value of the 'kvpairs' field.
   * @param value the value to set.
   */
  public void setKvpairs(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.kvpairs = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'kvpairs' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isKvpairsDirty(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'markers' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMarkers() {
    return markers;
  }

  /**
   * Sets the value of the 'markers' field.
   * @param value the value to set.
   */
  public void setMarkers(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.markers = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'markers' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isMarkersDirty(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'batchId' field.
   */
  public java.lang.CharSequence getBatchId() {
    return batchId;
  }

  /**
   * Sets the value of the 'batchId' field.
   * @param value the value to set.
   */
  public void setBatchId(java.lang.CharSequence value) {
    this.batchId = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'batchId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBatchIdDirty(java.lang.CharSequence value) {
    return isDirty(13);
  }

  /** Creates a new PageBlock RecordBuilder */
  public static org.qiwur.scent.storage.PageBlock.Builder newBuilder() {
    return new org.qiwur.scent.storage.PageBlock.Builder();
  }
  
  /** Creates a new PageBlock RecordBuilder by copying an existing Builder */
  public static org.qiwur.scent.storage.PageBlock.Builder newBuilder(org.qiwur.scent.storage.PageBlock.Builder other) {
    return new org.qiwur.scent.storage.PageBlock.Builder(other);
  }
  
  /** Creates a new PageBlock RecordBuilder by copying an existing PageBlock instance */
  public static org.qiwur.scent.storage.PageBlock.Builder newBuilder(org.qiwur.scent.storage.PageBlock other) {
    return new org.qiwur.scent.storage.PageBlock.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToWriteOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for PageBlock instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PageBlock>
    implements org.apache.avro.data.RecordBuilder<PageBlock> {

    private java.nio.ByteBuffer __g__dirty;
    private java.lang.CharSequence baseUrl;
    private java.lang.CharSequence xpath;
    private int baseSequence;
    private java.lang.CharSequence name;
    private int status;
    private long buildTime;
    private java.nio.ByteBuffer content;
    private java.lang.CharSequence contentMD5;
    private java.lang.CharSequence label;
    private float labelScore;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> kvpairs;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> markers;
    private java.lang.CharSequence batchId;

    /** Creates a new Builder */
    private Builder() {
      super(org.qiwur.scent.storage.PageBlock.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.qiwur.scent.storage.PageBlock.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing PageBlock instance */
    private Builder(org.qiwur.scent.storage.PageBlock other) {
            super(org.qiwur.scent.storage.PageBlock.SCHEMA$);
      if (isValidValue(fields()[0], other.__g__dirty)) {
        this.__g__dirty = (java.nio.ByteBuffer) data().deepCopy(fields()[0].schema(), other.__g__dirty);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseUrl)) {
        this.baseUrl = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.baseUrl);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.xpath)) {
        this.xpath = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.xpath);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.baseSequence)) {
        this.baseSequence = (java.lang.Integer) data().deepCopy(fields()[3].schema(), other.baseSequence);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = (java.lang.Integer) data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.buildTime)) {
        this.buildTime = (java.lang.Long) data().deepCopy(fields()[6].schema(), other.buildTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.content)) {
        this.content = (java.nio.ByteBuffer) data().deepCopy(fields()[7].schema(), other.content);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.contentMD5)) {
        this.contentMD5 = (java.lang.CharSequence) data().deepCopy(fields()[8].schema(), other.contentMD5);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.label)) {
        this.label = (java.lang.CharSequence) data().deepCopy(fields()[9].schema(), other.label);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.labelScore)) {
        this.labelScore = (java.lang.Float) data().deepCopy(fields()[10].schema(), other.labelScore);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.kvpairs)) {
        this.kvpairs = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) data().deepCopy(fields()[11].schema(), other.kvpairs);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.markers)) {
        this.markers = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) data().deepCopy(fields()[12].schema(), other.markers);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.batchId)) {
        this.batchId = (java.lang.CharSequence) data().deepCopy(fields()[13].schema(), other.batchId);
        fieldSetFlags()[13] = true;
      }
    }

    /** Gets the value of the 'baseUrl' field */
    public java.lang.CharSequence getBaseUrl() {
      return baseUrl;
    }
    
    /** Sets the value of the 'baseUrl' field */
    public org.qiwur.scent.storage.PageBlock.Builder setBaseUrl(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.baseUrl = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'baseUrl' field has been set */
    public boolean hasBaseUrl() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'baseUrl' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearBaseUrl() {
      baseUrl = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'xpath' field */
    public java.lang.CharSequence getXpath() {
      return xpath;
    }
    
    /** Sets the value of the 'xpath' field */
    public org.qiwur.scent.storage.PageBlock.Builder setXpath(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.xpath = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'xpath' field has been set */
    public boolean hasXpath() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'xpath' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearXpath() {
      xpath = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'baseSequence' field */
    public java.lang.Integer getBaseSequence() {
      return baseSequence;
    }
    
    /** Sets the value of the 'baseSequence' field */
    public org.qiwur.scent.storage.PageBlock.Builder setBaseSequence(int value) {
      validate(fields()[3], value);
      this.baseSequence = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'baseSequence' field has been set */
    public boolean hasBaseSequence() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'baseSequence' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearBaseSequence() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.qiwur.scent.storage.PageBlock.Builder setName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.name = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'name' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearName() {
      name = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'status' field */
    public java.lang.Integer getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public org.qiwur.scent.storage.PageBlock.Builder setStatus(int value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'status' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearStatus() {
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'buildTime' field */
    public java.lang.Long getBuildTime() {
      return buildTime;
    }
    
    /** Sets the value of the 'buildTime' field */
    public org.qiwur.scent.storage.PageBlock.Builder setBuildTime(long value) {
      validate(fields()[6], value);
      this.buildTime = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'buildTime' field has been set */
    public boolean hasBuildTime() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'buildTime' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearBuildTime() {
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'content' field */
    public java.nio.ByteBuffer getContent() {
      return content;
    }
    
    /** Sets the value of the 'content' field */
    public org.qiwur.scent.storage.PageBlock.Builder setContent(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.content = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'content' field has been set */
    public boolean hasContent() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'content' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearContent() {
      content = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'contentMD5' field */
    public java.lang.CharSequence getContentMD5() {
      return contentMD5;
    }
    
    /** Sets the value of the 'contentMD5' field */
    public org.qiwur.scent.storage.PageBlock.Builder setContentMD5(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.contentMD5 = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'contentMD5' field has been set */
    public boolean hasContentMD5() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'contentMD5' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearContentMD5() {
      contentMD5 = null;
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'label' field */
    public java.lang.CharSequence getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public org.qiwur.scent.storage.PageBlock.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.label = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'label' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearLabel() {
      label = null;
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'labelScore' field */
    public java.lang.Float getLabelScore() {
      return labelScore;
    }
    
    /** Sets the value of the 'labelScore' field */
    public org.qiwur.scent.storage.PageBlock.Builder setLabelScore(float value) {
      validate(fields()[10], value);
      this.labelScore = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'labelScore' field has been set */
    public boolean hasLabelScore() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'labelScore' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearLabelScore() {
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'kvpairs' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getKvpairs() {
      return kvpairs;
    }
    
    /** Sets the value of the 'kvpairs' field */
    public org.qiwur.scent.storage.PageBlock.Builder setKvpairs(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[11], value);
      this.kvpairs = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'kvpairs' field has been set */
    public boolean hasKvpairs() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'kvpairs' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearKvpairs() {
      kvpairs = null;
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'markers' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMarkers() {
      return markers;
    }
    
    /** Sets the value of the 'markers' field */
    public org.qiwur.scent.storage.PageBlock.Builder setMarkers(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[12], value);
      this.markers = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'markers' field has been set */
    public boolean hasMarkers() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'markers' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearMarkers() {
      markers = null;
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'batchId' field */
    public java.lang.CharSequence getBatchId() {
      return batchId;
    }
    
    /** Sets the value of the 'batchId' field */
    public org.qiwur.scent.storage.PageBlock.Builder setBatchId(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.batchId = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'batchId' field has been set */
    public boolean hasBatchId() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'batchId' field */
    public org.qiwur.scent.storage.PageBlock.Builder clearBatchId() {
      batchId = null;
      fieldSetFlags()[13] = false;
      return this;
    }
    
    @Override
    public PageBlock build() {
      try {
        PageBlock record = new PageBlock();
        record.__g__dirty = fieldSetFlags()[0] ? this.__g__dirty : (java.nio.ByteBuffer) java.nio.ByteBuffer.wrap(new byte[2]);
        record.baseUrl = fieldSetFlags()[1] ? this.baseUrl : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.xpath = fieldSetFlags()[2] ? this.xpath : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.baseSequence = fieldSetFlags()[3] ? this.baseSequence : (java.lang.Integer) defaultValue(fields()[3]);
        record.name = fieldSetFlags()[4] ? this.name : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (java.lang.Integer) defaultValue(fields()[5]);
        record.buildTime = fieldSetFlags()[6] ? this.buildTime : (java.lang.Long) defaultValue(fields()[6]);
        record.content = fieldSetFlags()[7] ? this.content : (java.nio.ByteBuffer) defaultValue(fields()[7]);
        record.contentMD5 = fieldSetFlags()[8] ? this.contentMD5 : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.label = fieldSetFlags()[9] ? this.label : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.labelScore = fieldSetFlags()[10] ? this.labelScore : (java.lang.Float) defaultValue(fields()[10]);
        record.kvpairs = fieldSetFlags()[11] ? this.kvpairs : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[11]));
        record.markers = fieldSetFlags()[12] ? this.markers : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[12]));
        record.batchId = fieldSetFlags()[13] ? this.batchId : (java.lang.CharSequence) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public PageBlock.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public PageBlock newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends PageBlock implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  				  /**
	   * Gets the value of the 'baseUrl' field.
		   */
	  public java.lang.CharSequence getBaseUrl() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'baseUrl' field.
		   * @param value the value to set.
	   */
	  public void setBaseUrl(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'baseUrl' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBaseUrlDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'xpath' field.
		   */
	  public java.lang.CharSequence getXpath() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'xpath' field.
		   * @param value the value to set.
	   */
	  public void setXpath(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'xpath' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isXpathDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'baseSequence' field.
		   */
	  public java.lang.Integer getBaseSequence() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'baseSequence' field.
		   * @param value the value to set.
	   */
	  public void setBaseSequence(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'baseSequence' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBaseSequenceDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'name' field.
		   */
	  public java.lang.CharSequence getName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'name' field.
		   * @param value the value to set.
	   */
	  public void setName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'name' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'status' field.
		   */
	  public java.lang.Integer getStatus() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'status' field.
		   * @param value the value to set.
	   */
	  public void setStatus(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'status' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStatusDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'buildTime' field.
		   */
	  public java.lang.Long getBuildTime() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'buildTime' field.
		   * @param value the value to set.
	   */
	  public void setBuildTime(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'buildTime' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBuildTimeDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'content' field.
		   */
	  public java.nio.ByteBuffer getContent() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'content' field.
		   * @param value the value to set.
	   */
	  public void setContent(java.nio.ByteBuffer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'content' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isContentDirty(java.nio.ByteBuffer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'contentMD5' field.
		   */
	  public java.lang.CharSequence getContentMD5() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'contentMD5' field.
		   * @param value the value to set.
	   */
	  public void setContentMD5(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'contentMD5' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isContentMD5Dirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'label' field.
		   */
	  public java.lang.CharSequence getLabel() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'label' field.
		   * @param value the value to set.
	   */
	  public void setLabel(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'label' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLabelDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'labelScore' field.
		   */
	  public java.lang.Float getLabelScore() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'labelScore' field.
		   * @param value the value to set.
	   */
	  public void setLabelScore(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'labelScore' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLabelScoreDirty(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'kvpairs' field.
		   */
	  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getKvpairs() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'kvpairs' field.
		   * @param value the value to set.
	   */
	  public void setKvpairs(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'kvpairs' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isKvpairsDirty(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'markers' field.
		   */
	  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMarkers() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'markers' field.
		   * @param value the value to set.
	   */
	  public void setMarkers(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'markers' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isMarkersDirty(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'batchId' field.
		   */
	  public java.lang.CharSequence getBatchId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'batchId' field.
		   * @param value the value to set.
	   */
	  public void setBatchId(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'batchId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBatchIdDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}